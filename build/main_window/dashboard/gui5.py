
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
import random
from tkinter import Frame, Tk, Canvas, Entry, Text, Button, PhotoImage
import controller as db_controller
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\traffic_offense_system\build\assets\frame5")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def dashboard():
    Dashboard()

class Dashboard(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        

        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 644,
            width = 1200,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            600.0,
            321.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = self.canvas.create_image(
            67.0,
            64.0,
            image=self.image_image_2
        )

        self.canvas.create_rectangle(
            30.0,
            114.0,
            1170.0,
            614.0,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            418.0,
            210.0,
            1133.0,
            576.0,
            fill="#D9D9D9",
            outline="")

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = self.canvas.create_image(
            602.0,
            363.0,
            image=self.image_image_3
        )

        self.total_offense = self.canvas.create_text(
            200.0,
            218.0,
            anchor="nw",
            text="10",
            fill="#000000",
            font=("MontserratRoman SemiBold", 40 * -1)
        )

        self.total_offense_month = self.canvas.create_text(
            200.0,
            514.0,
            anchor="nw",
            text="10",
            fill="#000000",
            font=("MontserratRoman SemiBold", 40 * -1)
        )

        self.total_offense_total = self.canvas.create_text(
            200.0,
            368.0,
            anchor="nw",
            text="10",
            fill="#000000",
            font=("MontserratRoman SemiBold", 40 * -1)
        )
        


        self.figure = Figure(figsize=(5, 3), facecolor='white')
        self.ax = self.figure.add_subplot()
        self.canvas_graph = FigureCanvasTkAgg(self.figure, master=self)
        self.canvas_graph.get_tk_widget().place(x=418, y=210, width=715, height=366)
        
        self.auto_refresh_interval = 5000
        self.auto_refresh()

    def update_text(self):
        total_offense = db_controller.get_total_amount_offense()
        self.canvas.itemconfigure(self.total_offense, text=total_offense)
        self.canvas.itemconfigure(self.total_offense_month, text=total_offense + 200)
        self.canvas.itemconfigure(self.total_offense_total, text=total_offense +197)

    def update_graph(self, total_offense):
        self.ax.clear()
        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        
        # Let's create a sample of monthly offenses
        total_offenses = [20, 15, 30, 25, 35, 40, 50, 45, 55, 60, 45, 30]  # Replace this with your actual data
        
        colors = ['#FFA25F']
        self.ax.plot(months, total_offenses, color=colors[0], alpha=0.8)
        self.ax.fill_between(months, total_offenses, color=colors[0], alpha=0.3)
        self.ax.set_xlabel('Month')
        self.ax.set_ylabel('Amount')
        self.ax.set_title('Monthly Offenses')
        self.canvas_graph.draw()


    def auto_refresh(self):
        total_offense = db_controller.get_total_amount_offense()
        self.update_text()
        self.update_graph(total_offense)
        self.after(self.auto_refresh_interval, self.auto_refresh)
