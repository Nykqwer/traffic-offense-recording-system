
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
from tkinter.ttk import Style, Treeview
import controller as db_controller

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def view_record():
    viewRecord()


class viewRecord(Frame):
      def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.selected_r_id = self.parent.selected_rid   
        self.search_query = StringVar()

        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 644,
            width = 1200,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            600.0,
            321.0,
            image=self.image_image_1
        )

        canvas.create_rectangle(
            30.0,
            114.0,
            1170.0,
            537.0,
            fill="#FFFFFF",
            outline="")

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_edit,
            relief="flat"
        )
        button_1.place(
            x=953.0,
            y=552.0,
            width=217.0,
            height=62.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.delete_btn = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_delete,
            relief="flat"
        )
        self.delete_btn.place(
            x=721.0,
            y=552.0,
            width=217.0,
            height=62.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_3 = Button(
            self,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda:self.parent.navigate("add"),
            relief="flat"
        )
        button_3.place(
            x=30.0,
            y=552.0,
            width=217.0,
            height=62.0
        )

        self.button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_4 = Button(
            self,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_getInfo,
            relief="flat"
        )
        button_4.place(
            x=489.0,
            y=552.0,
            width=217.0,
            height=62.0
        )

        self.button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_5 = Button(
            self, 
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )
        button_5.place(
            x=1122.0,
            y=49.0,
            width=30.0,
            height=30.0
        )

        self.button_image_6 = PhotoImage(
            file=relative_to_assets("button_6.png"))
        button_6 = Button(
            self,
            image=self.button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_refresh,
            relief="flat"
        )
        button_6.place(
            x=382.0,
            y=49.0,
            width=30.0,
            height=30.0
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = canvas.create_image(
            978.0,
            64.0,
            image=self.image_image_2
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            979.0,
            64.0,
            image=entry_image_1
        )
        entry_1 = Entry(
            self,
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0,
            textvariable=self.search_query
        )
        
        entry_1.bind(
            "<KeyRelease>",
            lambda event: self.filter_treeview_records(self.search_query.get()),
        )
        
        
        entry_1.place(
            x=849.0,
            y=50.0,
            width=260.0,
            height=26.0
        )

        self.columns = {
    "id": ["ID", 10],
    "d_name": ["Driver Name", 50],
    "d_license": ["Driver License", 50],
    "address": ["Address", 50],
    "p_no": ["Phone Number", 50],
    "email": ["Email", 50],
    "v_reg": ["Vehicle Registration", 50],
    "v_model": ["Vehicle Model", 50],
    "v_no": ["Vehicle Number", 50],
    "off_name": ["Officer Name", 50],
    "e_agency": ["Enforcement Agency", 50],
    "offense": ["Offense", 50],
    "date": ["Date", 50],
    "time": ["Time", 50],
    "location": ["Location", 50],
    "description": ["Description", 50],
    "off_code": ["Offense Code", 50],
    "court_no": ["Court Number", 50],
    "hearing_date": ["Hearing Date", 50],
    "outcome": ["Outcome", 50],
    "fines": ["Fines", 50],
    "payment": ["Payment", 50]
}

        
                # Create a style
        self.style = Style(self)
        self.style.configure("Custom.Treeview", background="#FFFFFF")
        self.style.map("Custom.Treeview",
                       background=[("selected", "#117EE4")])

        self.treeview = Treeview(
            self,
            columns=list(self.columns.keys()),
            show="headings",
            height=200,
            selectmode="browse",
            style="Custom.Treeview"
            # bg="#FFFFFF",
            # fg="#5E95FF",
            # font=("Montserrat Bold", 18 * -1)
        )

        for idx, txt in self.columns.items():
            self.treeview.heading(idx, text=txt[0],anchor='center')
            self.treeview.column(idx, width=txt[1],anchor='center')

        self.treeview.place(x=30, y=114, width=1140, height=423)

        self.handle_refresh()   

        self.treeview.bind("<<TreeviewSelect>>", self.on_treeview_select)

      def filter_treeview_records(self, query):
        self.treeview.delete(*self.treeview.get_children())
    
        for row in self.record_data:
           
            if query.lower() in str(row).lower():
            
                self.treeview.insert("", "end", values=row)
        self.on_treeview_select()

      def on_treeview_select(self, event=None):
        try:
            self.treeview.selection()[0]
        except IndexError:
            self.parent.selected_rid = None
            return
   
        item = self.treeview.selection()[0]
      
        self.parent.selected_rid = self.treeview.item(item, "values")[0]
    
        self.delete_btn.config(state="normal")
        self.edit_btn.config(state="normal")

      def handle_refresh(self):
            self.treeview.delete(*self.treeview.get_children())
            self.record_data = db_controller.get_record()
       
            for row in self.record_data:
                self.treeview.insert("", "end", values=row)
                
      def handle_delete(self):
        if db_controller.delete_record(self.parent.selected_rid):
            messagebox.showinfo("Success","Successfully Deleted the table")
        else:
            messagebox.showerror("failed","Unable to delete table")

        self.handle_refresh()
        
      def handle_edit(self):
        self.parent.navigate("up")
        self.parent.windows["up"].initialize()
        self.handle_refresh()
        
    
      def handle_getInfo(self):
          self.parent.navigate("info")
          self.parent.windows["info"].initialize_info()
          self.handle_refresh()